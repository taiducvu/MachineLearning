'''
Created on Dec 7, 2015

@author: tai
'''
import theano
import Layers
import theano.tensor as T
import numpy as np
import Algorithms

class Network(object):
    def __init__(self, training_data, validation_data, ls_layers, ls_Alg, early_stoping=False):
        """
        training_data: a list contains 2 objects that are training samples and their labels
        validation_data: a list contains 2 objects that are validation samples and their labels
        ls_layers: a list contains layers in the network
        """
        self.Xtrain, self.Ytrain = training_data
        self.Xvalidate, self.Yvalidate = validation_data
        self.n_train_data = self.Xtrain.shape[0]
        self.layers = ls_layers
        self.early_stop = early_stoping
        self.train_model = []
        self.predict = []
        self.ls_Alg = ls_Alg
         
    def prepare(self, eta):
        x = T.matrix(name='x')
        y = T.matrix(name='y', dtype='int32')
        
        ## Forward propagation
        for i in range(len(self.ls_Alg)):
            a = x.T
            for layer in self.layers[i]:
                a = layer.forward_propagation(a)
            self.predict.append(T.argmax(a, axis = 1, keepdims = True))
        ## Define functions such as cost function, predict Function
        #predict = T.argmax(a, axis = 1, keepdims = True)
        
        for i in range(len(self.ls_Alg)):
            error = T.mean(T.neq(self.predict[i], y))
        

        #self.Alg = Algorithms.Momentum(eta,0.5)
        for alg, wlayer in zip(self.ls_Alg, self.layers):
            self.train_model.append(alg.Update(wlayer))
            
        #self.train_model = self.Alg.Update(self.layers)
        self.predict = theano.function([x], predict)
        self.error = theano.function([x, y], error, allow_input_downcast=True)
    
        
    def Train(self, max_epochs, mnb_size, eta):
        self.prepare(eta)
        training_data_id = range(self.n_train_data)
        for epoch in xrange(max_epochs):
            np.random.shuffle(training_data_id)
            for start_idx in xrange(0, self.n_train_data, mnb_size):
                Xtrain_batch = self.Xtrain[training_data_id[start_idx:start_idx+mnb_size],:]
                Ytrain_batch = self.Ytrain[training_data_id[start_idx:start_idx+mnb_size],:]
                for i in range(len(self.ls_Alg)):
                    self.train_model[i](Xtrain_batch, Ytrain_batch)
            train_err = self.error(self.Xvalidate, self.Yvalidate)
            print('epoch %i, validation error %f' %(epoch, train_err))
        
        
                    